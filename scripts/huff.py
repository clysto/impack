import numpy as np

ac_huff_table = np.array(
    [
        [0x000A, 0x0000, 0x0001, 0x0004, 0x000B, 0x001A, 0x0078, 0x00F8, 0x03F6, 0xFF82, 0xFF83],
        [0x0000, 0x000C, 0x001B, 0x0079, 0x01F6, 0x07F6, 0xFF84, 0xFF85, 0xFF86, 0xFF87, 0xFF88],
        [0x0000, 0x001C, 0x00F9, 0x03F7, 0x0FF4, 0xFF89, 0xFF8A, 0xFF8B, 0xFF8C, 0xFF8D, 0xFF8E],
        [0x0000, 0x003A, 0x01F7, 0x0FF5, 0xFF8F, 0xFF90, 0xFF91, 0xFF92, 0xFF93, 0xFF94, 0xFF95],
        [0x0000, 0x003B, 0x03F8, 0xFF96, 0xFF97, 0xFF98, 0xFF99, 0xFF9A, 0xFF9B, 0xFF9C, 0xFF9D],
        [0x0000, 0x007A, 0x07F7, 0xFF9E, 0xFF9F, 0xFFA0, 0xFFA1, 0xFFA2, 0xFFA3, 0xFFA4, 0xFFA5],
        [0x0000, 0x007B, 0x0FF6, 0xFFA6, 0xFFA7, 0xFFA8, 0xFFA9, 0xFFAA, 0xFFAB, 0xFFAC, 0xFFAD],
        [0x0000, 0x00FA, 0x0FF7, 0xFFAE, 0xFFAF, 0xFFB0, 0xFFB1, 0xFFB2, 0xFFB3, 0xFFB4, 0xFFB5],
        [0x0000, 0x01F8, 0x7FC0, 0xFFB6, 0xFFB7, 0xFFB8, 0xFFB9, 0xFFBA, 0xFFBB, 0xFFBC, 0xFFBD],
        [0x0000, 0x01F9, 0xFFBE, 0xFFBF, 0xFFC0, 0xFFC1, 0xFFC2, 0xFFC3, 0xFFC4, 0xFFC5, 0xFFC6],
        [0x0000, 0x01FA, 0xFFC7, 0xFFC8, 0xFFC9, 0xFFCA, 0xFFCB, 0xFFCC, 0xFFCD, 0xFFCE, 0xFFCF],
        [0x0000, 0x03F9, 0xFFD0, 0xFFD1, 0xFFD2, 0xFFD3, 0xFFD4, 0xFFD5, 0xFFD6, 0xFFD7, 0xFFD8],
        [0x0000, 0x03FA, 0xFFD9, 0xFFDA, 0xFFDB, 0xFFDC, 0xFFDD, 0xFFDE, 0xFFDF, 0xFFE0, 0xFFE1],
        [0x0000, 0x07F8, 0xFFE2, 0xFFE3, 0xFFE4, 0xFFE5, 0xFFE6, 0xFFE7, 0xFFE8, 0xFFE9, 0xFFEA],
        [0x0000, 0xFFEB, 0xFFEC, 0xFFED, 0xFFEE, 0xFFEF, 0xFFF0, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4],
        [0x07F9, 0xFFF5, 0xFFF6, 0xFFF7, 0xFFF8, 0xFFF9, 0xFFFA, 0xFFFB, 0xFFFC, 0xFFFD, 0xFFFE],
    ]
)

ac_huff_table_codelen = np.array(
    [
        [4, 2, 2, 3, 4, 5, 7, 8, 10, 16, 16],
        [0, 4, 5, 7, 9, 11, 16, 16, 16, 16, 16],
        [0, 5, 8, 10, 12, 16, 16, 16, 16, 16, 16],
        [0, 6, 9, 12, 16, 16, 16, 16, 16, 16, 16],
        [0, 6, 10, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 7, 12, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 8, 12, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 9, 15, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
        [11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16],
    ]
)

ac_huff_length_info = [(0, 0, 0) for _ in range(17)]
ac_huff_symbols = []

for i in range(17):
    idx = np.argwhere(ac_huff_table_codelen == i)
    info = ac_huff_table[idx[:, 0], idx[:, 1]]
    if len(info):
        start_index = len(ac_huff_symbols)
        ac_huff_symbols.extend([(x.item(), y.item()) for x, y in zip(idx[:, 0], idx[:, 1])])
        end_index = len(ac_huff_symbols)
        ac_huff_length_info[i] = (info[0].item(), start_index, end_index)


for i in range(17):
    print(f"0x{ac_huff_length_info[i][0]:04X}")

# 0xFFFA
# info = ac_huff_length_info[16]
# first_sym = info[0]
# tbl = ac_huff_symbols[info[1]:info[2]]
# sym = tbl[0xFFB2 - first_sym]
# print(sym)

for i in range(16):
    for j in range(11):
        t = ac_huff_symbols[i * 11 + j]
        print(".{" + f"{t[0]}, {t[1]}" + "}", end=", ")
    print("")
